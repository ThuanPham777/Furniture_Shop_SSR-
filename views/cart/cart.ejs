<div class="my-6">
    <div>
        <h1 class="text-xl font-bold text-center mb-6">My Cart</h1>
    </div>
    <div class="cart-page-container my-6 px-4 flex flex-col lg:flex-row justify-center items-center">
        <!-- Cart Section -->
        <div class="cart-container lg:w-2/3 px-4">


            <table class="w-full border-collapse">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="p-2 border">Image</th>
                        <th class="p-2 border">Name</th>
                        <th class="p-2 border">Quantity</th>
                        <th class="p-2 border">Price</th>
                        <th class="p-2 border">Action</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (cartItems.length> 0) { %>
                        <% cartItems.forEach(item=> { %>
                            <tr>
                                <td class="p-2 border text-center">
                                    <img src="<%= item.productId.images[0] %>" alt="<%= item.productId.name %>"
                                        class="w-16 h-16 object-cover rounded">
                                </td>
                                <td class="p-2 border text-center text-sm">
                                    <%= item.productId.name %>
                                </td>
                                <td class="p-2 border text-center">
                                    <input type="number" id="quantity-<%= item.productId._id %>"
                                        value="<%= item.quantity %>" min="1" max="<%= item.productId.totalStock %>"
                                        class="w-16 p-1 border rounded text-center"
                                        onChange="updateQuantity('<%= item.productId._id %>', this.value)"
                                        onblur="validateQuantity(this, '<%= item.productId._id %>')">
                                </td>
                                <td class="p-2 border text-center">$<%= ((item.productId.salePrice || item.productId.price)
                                        * item.quantity).toFixed(2) %>
                                </td>
                                <td class="p-2 border text-center">
                                    <button onclick="removeFromCart('<%= item.productId._id %>')"
                                        class="bg-red-500 text-white px-3 py-1 rounded text-xs">Remove</button>
                                </td>
                            </tr>
                            <% }); %>
                                <% } else { %>
                                    <tr>
                                        <td colspan="5" class="p-2 text-center text-gray-500">The Cart is Empty</td>
                                    </tr>
                                    <% } %>
                </tbody>
            </table>

            <% if (cartItems.length> 0) { %>
                <div class="flex justify-center mt-4">
                    <button onclick="deleteAllItems()" class="bg-red-600 text-white px-6 py-2 rounded text-sm">Delete
                        All</button>
                </div>
                <% } %>
        </div>

        <!-- Checkout Section -->
        <div class="checkout-container lg:w-1/3 px-4 mt-6 lg:mt-0">
            <div class="border p-4 rounded shadow-md">
                <h2 class="text-lg font-bold mb-4">Order Summary</h2>
                <p class="text-sm mb-2">
                    <span class="font-semibold">Total Quantity:</span>
                    <span class="text-green-500">
                        <%= totalQuantity %>
                    </span>
                </p>
                <p class="text-sm mb-4">
                    <span class="font-semibold">Total Amount:</span>
                    <span class="text-green-500">$<%= totalAmount.toFixed(2) %></span>
                </p>
                <!-- Nút chuyển đến trang Checkout -->
                <button class="bg-blue-600 text-white w-full py-2 rounded hover:bg-blue-700"
                    onclick="window.location.href = '/checkout'">
                    Proceed to Checkout
                </button>
            </div>
        </div>
    </div>

</div>


<script>
    // Function to update the quantity in the cart
    async function updateQuantity(productId, quantity) {

        const maxQuantity = document.querySelector(`#quantity-${productId}`).max;
        if (quantity > maxQuantity) {
            alert(`You can only purchase up to ${maxQuantity} items.`);
            quantity = maxQuantity; // Reset to max quantity
        }

        try {
            const response = await fetch(`/api/cart/update`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    productId,
                    quantity: parseInt(quantity), // Ensure quantity is an integer
                }),
            });

            const result = await response.json();
            if (response.ok) {
                location.reload(); // Reload the page to reflect the updated cart
            } else {
                  alert(result.message || 'Failed to update item quantity');
            }
        } catch (error) {
            alert('Something went wrong while updating the quantity');
        }
    }

    // Function to remove an item from the cart
    async function removeFromCart(productId) {
        try {
            const response = await fetch(`/api/cart/delete/${productId}`, { method: 'DELETE' });
            if (response.ok) {
                location.reload(); // Reload the page to reflect the updated cart
            } else {
                alert('Failed to remove item from cart');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Something went wrong!');
        }
    }

    async function deleteAllItems() {
            try {
                const response = await fetch('/api/cart/delete-all', { method: 'DELETE' });

                if (response.ok) {
                    location.reload(); // Reload the page to reflect the updated cart
                } else {
                    alert('Failed to clear the cart');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Something went wrong while clearing the cart');
            }
        }

        // Function to validate input value when the user leaves the input field
            function validateQuantity(inputElement, productId) {
                let quantity = parseInt(inputElement.value);
                const maxQuantity = inputElement.max;

                // If the input is invalid (non-numeric or out of range), reset it to valid value
                if (isNaN(quantity) || quantity < 1) {
                    alert('Please enter a valid quantity');
                    inputElement.value = 1; // Reset to minimum
                } else if (quantity > maxQuantity) {
                    alert(`You can only purchase up to ${maxQuantity} items.`);
                    inputElement.value = maxQuantity; // Reset to max quantity
                }
            }
</script>