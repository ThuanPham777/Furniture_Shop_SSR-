<div class="my-20">
    <div class="cart-page-container my-6 px-4 flex flex-col lg:flex-row justify-center items-center">
        <!-- Cart Section -->
        <div id="cart-section" class="cart-container lg:w-2/3 px-4">
            <% if (cartItems.length> 0) { %>
                <table class="w-full border-collapse">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="p-2 border">Image</th>
                            <th class="p-2 border">Name</th>
                            <th class="p-2 border">Quantity</th>
                            <th class="p-2 border">Price</th>
                            <th class="p-2 border">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% cartItems.forEach(item=> { %>
                            <tr id="row-<%= item.productId._id %>">
                                <td class="p-2 border flex justify-center">
                                    <img src="<%= item.productId.images[0] %>" alt="<%= item.productId.name %>"
                                        class="w-16 h-16 object-cover rounded">
                                </td>
                                <td class="p-2 border text-center text-sm">
                                    <%= item.productId.name %>
                                </td>
                                <td class="p-2 border text-center">
                                    <input type="number" id="quantity-<%= item.productId._id %>"
                                        value="<%= item.quantity %>" min="1" max="<%= item.productId.totalStock %>"
                                        class="w-16 p-1 border rounded text-center"
                                        onChange="updateQuantity('<%= item.productId._id %>', this.value)"
                                        onblur="validateQuantity(this, '<%= item.productId._id %>')">
                                </td>
                                <td class="p-2 border text-center" id="price-<%= item.productId._id %>">
                                    $<%= ((item.productId.salePrice || item.productId.price) * item.quantity).toFixed(2)
                                        %>
                                </td>
                                <td class="p-2 border text-center">
                                    <button onclick="removeFromCart('<%= item.productId._id %>')"
                                        class="bg-red-500 text-white px-3 py-1 rounded text-xs">Remove</button>
                                </td>
                            </tr>
                            <% }); %>
                    </tbody>
                </table>

                <div class="flex justify-center mt-4">
                    <button onclick="deleteAllItems()" class="bg-red-600 text-white px-6 py-2 rounded text-sm">
                        Delete All
                    </button>
                </div>
                <% } else { %>
                    <p class="text-center text-gray-500">The Cart is Empty</p>
                    <div class="flex justify-center mt-4">
                        <button onclick="window.location.href = '/shop'"
                            class="bg-blue-600 text-white px-6 py-2 rounded text-sm">
                            Return to Shop
                        </button>
                    </div>
                    <% } %>
        </div>

        <!-- Checkout Section -->
        <% if (cartItems.length> 0) { %>
            <div id="checkout-section" class="checkout-container lg:w-1/3 px-4 mt-6 lg:mt-0">
                <div class="border p-4 rounded shadow-md">
                    <h2 class="text-lg font-bold mb-4">Order Summary</h2>
                    <p class="text-sm mb-2">
                        <span class="font-semibold">Total Quantity:</span>
                        <span class="text-green-500" id="total-quantity">
                            <%= totalQuantity %>
                        </span>
                    </p>
                    <p class="text-sm mb-4">
                        <span class="font-semibold">Total Amount:</span>
                        <span class="text-green-500" id="total-amount">$<%= totalAmount.toFixed(2) %></span>
                    </p>
                    <button class="bg-blue-600 text-white w-full py-2 rounded hover:bg-blue-700"
                        onclick="window.location.href = '/checkout'">
                        Proceed to Checkout
                    </button>
                </div>
            </div>
            <% } %>
    </div>
</div>




<script>
    // Function to update the quantity in the cart
    async function updateQuantity(productId, quantity) {
        const inputElement = document.querySelector(`#quantity-${productId}`);
        const maxQuantity = parseInt(inputElement.max, 10);
        quantity = parseInt(quantity, 10);

        if (quantity > maxQuantity) {
            alert(`You can only purchase up to ${maxQuantity} items.`);
            inputElement.value = maxQuantity; // Đặt lại giá trị
            quantity = maxQuantity;
        }

        try {
            const response = await fetch(`/api/cart/update`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, quantity: parseInt(quantity) }),
            });

            const result = await response.json();
            if (response.ok) {
                const priceElement = document.querySelector(`#price-${productId}`);
                const totalQuantityElement = document.querySelector(`#total-quantity`);
                const totalAmountElement = document.querySelector(`#total-amount`);

                console.log(priceElement, totalQuantityElement, totalAmountElement); // Log các phần tử DOM

                priceElement.innerText = `$${result.updatedCartItem.price.toFixed(2)}`;
                totalQuantityElement.innerText = result.totalQuantity;
                totalAmountElement.innerText = `$${result.totalAmount.toFixed(2)}`;
            } else {
                alert(result.message || 'Failed to update item quantity');
            }
        } catch (error) {
            alert('Something went wrong while updating the quantity');
        }
    }

    // Function to remove an item from the cart
    async function removeFromCart(productId) {
        try {
            const response = await fetch(`/api/cart/delete/${productId}`, { method: 'DELETE' });
            const result = await response.json();

            if (response.ok) {
                console.log("cartItems", result.cartItems);
                updateCartUI(result.cartItems, result.totalQuantity, result.totalAmount);
            } else {
                alert(result.message || 'Failed to remove item from cart');
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Something went wrong!');
        }
    }

     // Function to delete all items from the cart
        async function deleteAllItems() {
            try {
                const response = await fetch('/api/cart/delete-all', { method: 'DELETE' });
                const result = await response.json();

                if (response.ok) {
                    updateCartUI(result.cartItems, result.totalQuantity, result.totalAmount);
                } else {
                    alert('Failed to clear the cart');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Something went wrong while clearing the cart');
            }
        }


    // Function to update the cart UI
    function updateCartUI(cartItems, totalQuantity, totalAmount) {
        const cartSection = document.querySelector('#cart-section');
        const checkoutSection = document.querySelector('#checkout-section');
        // Update cart items table
        console.log("cartItems: " + cartItems);
        if (cartItems && cartItems.length > 0) {
            const cartTable = `
        <table class="w-full border-collapse">
            <thead class="bg-gray-100">
                <tr>
                    <th class="p-2 border">Image</th>
                    <th class="p-2 border">Name</th>
                    <th class="p-2 border">Quantity</th>
                    <th class="p-2 border">Price</th>
                    <th class="p-2 border">Action</th>
                </tr>
            </thead>
            <tbody>

                ${cartItems.map(item => `
                    <tr id="row-${item.productId._id}">
                        <td class="p-2 border flex justify-center">
                            <img src="${item.productId.images[0]}" alt="${item.productId.name}" class="w-16 h-16 object-cover rounded">
                        </td>
                        <td class="p-2 border text-center text-sm">${item.productId.name}</td>
                        <td class="p-2 border text-center">
                            <input type="number" id="quantity-${item.productId._id}" value="${item.quantity}" min="1" max="${item.productId.totalStock}" class="w-16 p-1 border rounded text-center" onChange="updateQuantity('${item.productId._id}', this.value)" onblur="validateQuantity(this, '${item.productId._id}')">
                        </td>
                        <td class="p-2 border text-center" id="price-${item.productId._id}">
                            $${((item.productId.salePrice || item.productId.price) * item.quantity).toFixed(2)}
                        </td>
                        <td class="p-2 border text-center">
                            <button onclick="removeFromCart('${item.productId._id}')" class="bg-red-500 text-white px-3 py-1 rounded text-xs">Remove</button>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
        <div class="flex justify-center mt-4">
            <button onclick="deleteAllItems()" class="bg-red-600 text-white px-6 py-2 rounded text-sm">Delete All</button>
        </div>
        `;
            cartSection.innerHTML = cartTable;
        } else {
            cartSection.innerHTML = `
        <p class="text-center text-gray-500">The Cart is Empty</p>
        <div class="flex justify-center mt-4">
            <button onclick="window.location.href = '/shop'" class="bg-blue-600 text-white px-6 py-2 rounded text-sm">Return to Shop</button>
        </div>
        `;
        }

        // Update checkout section
        if (cartItems && cartItems.length > 0) {
            const checkoutSummary = `
        <div class="border p-4 rounded shadow-md">
            <h2 class="text-lg font-bold mb-4">Order Summary</h2>
            <p class="text-sm mb-2">
                <span class="font-semibold">Total Quantity:</span>
                <span class="text-green-500" id="total-quantity">${totalQuantity}</span>
            </p>
            <p class="text-sm mb-4">
                <span class="font-semibold">Total Amount:</span>
                <span class="text-green-500" id="total-amount">$${totalAmount.toFixed(2)}</span>
            </p>
            <button class="bg-blue-600 text-white w-full py-2 rounded hover:bg-blue-700" onclick="window.location.href = '/checkout'">Proceed to Checkout</button>
        </div>
        `;
            checkoutSection.innerHTML = checkoutSummary;
        }
        else{
            checkoutSection.style.display = 'none';
        }
    }


    // Function to validate quantity input
    function validateQuantity(inputElement, productId) {
        let quantity = parseInt(inputElement.value);
        const maxQuantity = inputElement.max;

        if (isNaN(quantity) || quantity < 1) {
            alert('Please enter a valid quantity');
            inputElement.value = 1;
        } else if (quantity > maxQuantity) {
            alert(`You can only purchase up to ${maxQuantity} items.`);
            inputElement.value = maxQuantity;
        }
    }

</script>